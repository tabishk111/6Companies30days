class Solution {
    int[] dx = {1,-1,0,0};
    int[] dy = {0,0,1,-1};
    public int bfs(int x,int y,int[][] grid,int n){
        int[][] vis = new int[n][n];
        Queue<Pair> q = new LinkedList<>();
        q.add(new Pair(x,y));
        vis[x][y]=1;
        while(!q.isEmpty()){
            Pair curr = q.remove();
            if(grid[curr.x][curr.y]==1){
                
                int res = Math.abs(x-curr.x)+Math.abs(y-curr.y);
                return res;
            }
                for(int i=0;i<4;i++){
                    int nx = curr.x+dx[i];
                    int ny = curr.y+dy[i];
                    if(nx<0||ny<0||nx>=n||ny>=n||vis[nx][ny]==1)
                        continue;
                    q.add(new Pair(nx,ny));
                    vis[nx][ny]=1;
                }
        }
        return -1;
    }
    public int maxDistance(int[][] grid) {
        int res=-1;
        int n = grid.length;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==0){
                    int temp = bfs(i,j,grid,n);
                    res = Math.max(res,temp);
                }
            }
        }
        return res;
    }
}
