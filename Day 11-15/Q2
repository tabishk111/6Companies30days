class Solution {
    public boolean isPossible(int n, int[][] a)
    {
        // Your Code goes here
        int m = a.length;
        ArrayList<ArrayList<Integer>> adj = new ArrayList<ArrayList<Integer>>();
        for(int i =0;i<n;i++)
        adj.add(new ArrayList<Integer>());
        int in[] = new int[n];
        Arrays.fill(in,0);
        for(int i =0;i<m;i++)
        {
            adj.get(a[i][1]).add(a[i][0]);
            in[a[i][0]]++;
        }
        Queue<Integer> q  =new LinkedList<Integer>();
        for(int i =0;i<n;i++)
        if(in[i]==0)
        q.add(i);
        int c=0;
        while(!q.isEmpty())
        {
            int curr=q.peek();
            c++;
            q.remove();
            for(int i =0;i<adj.get(curr).size();i++)
            {
                int node = adj.get(curr).get(i);
                in[node]--;
                if(in[node]==0)
                q.add(node);
            }
        }
        if(c==n)
        return true;
        else
        return false;
    }
    
}
