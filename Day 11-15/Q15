class Solution
{
    public String findOrder(String [] dict, int N, int K)
    {
        // Write your code here
        ArrayList<ArrayList<Integer>> adj = new ArrayList<ArrayList<Integer>>();
        int in[]=new int[K];
        Arrays.fill(in,0);
        for(int i =0;i<K;i++)
        adj.add(new ArrayList<Integer>());
        for(int i =0;i<N-1;i++)
        {
            String s1=dict[i];
            String s2=dict[i+1];
            for(int j =0;j<Math.min(s1.length(),s2.length());j++)
            {
                if(s1.charAt(j)!=s2.charAt(j))
                {
                    int i1=s1.charAt(j)-'a';
                    int i2=s2.charAt(j)-'a';
                    adj.get(i1).add(i2);
                    in[i2]++;
                    break;
                }
            }
        }
        Queue<Integer> q = new LinkedList<Integer>();
        StringBuilder res= new StringBuilder();
        for(int i =0;i<K;i++)
        if(in[i]==0)
        q.add(i);
        while(!q.isEmpty())
        {
            int curr = q.peek();
            res.append((char)(curr+97));
            q.remove();
            for(int i =0;i<adj.get(curr).size();i++)
            {
                int node = adj.get(curr).get(i);
                in[node]--;
                if(in[node]==0)
                q.add(node);
            }
        }
        return res.toString();
        
        
    }
}
