class Solution {
    public boolean isValid(int x,int y,int n,int m,int[][] g)
    {
        if(x<0||y<0||x>=n||y>=m)
            return false;
        if(g[x][y]==0||g[x][y]==2)
            return false;
        return true;
    }
    public int orangesRotting(int[][] g) {
        int n = g.length;
        int m = g[0].length;
        Queue<Integer> qx = new LinkedList<>();
        Queue<Integer> qy = new LinkedList<>();
        int[] dx = {1,-1,0,0};
        int[] dy = {0,0,1,-1};
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(g[i][j]==2)
                {
                    qx.add(i);
                    qy.add(j);
                }
            }
        }
        if(qx.size()==0)
        {
            for(int i=0;i<n;i++)
                for(int j=0;j<m;j++)
                    if(g[i][j]==1)
                        return -1;
            return 0;
        }
        int res=-1;
        while(!qx.isEmpty())
        {
            int s = qx.size();
            while(s-->0){
            int x = qx.remove();
            int y = qy.remove();
            for(int i=0;i<4;i++)
            {
                int nx = x+dx[i];
                int ny = y+dy[i];
                if(isValid(nx,ny,n,m,g))
                {
                    qx.add(nx);
                    qy.add(ny);
                    g[nx][ny]=2;
                }
            }
            }
            res++;
        }
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(g[i][j]==1)
                    return -1;
            }
        }
        return res;
    }
}
